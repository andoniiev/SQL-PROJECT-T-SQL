-- tables
-- Table: APPOINTMENT
CREATE TABLE APPOINTMENT (
    APPOINTMENT_ID int  NOT NULL,
    ADATE date  NOT NULL,
    PATIENT_ID int  NOT NULL,
    EMPLOYEE_ID int  NOT NULL,
    CONSTRAINT APPOINTMENT_pk PRIMARY KEY  (APPOINTMENT_ID)
);

-- Table: CLINIC
CREATE TABLE CLINIC (
    CLINIC_ID int  NOT NULL,
    CLINIC_NAME varchar(15)  NOT NULL,
    ADDRESS varchar(25)  NOT NULL,
    PHONE varchar(25)  NOT NULL,
    CONSTRAINT CLINIC_pk PRIMARY KEY  (CLINIC_ID)
);

-- Table: EMPLOYEE
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID int  NOT NULL,
    ENAME varchar(50)  NOT NULL,
    POSITION varchar(50)  NOT NULL,
    PHONE varchar(50)  NOT NULL,
    SAL int  NOT NULL,
    CLINIC_ID int  NOT NULL,
    CONSTRAINT EMPLOYEE_pk PRIMARY KEY  (EMPLOYEE_ID)
);

-- Table: PATIENTS
CREATE TABLE PATIENTS (
    PATIENT_ID int  NOT NULL,
    PNAME varchar(50)  NOT NULL,
    PHONE varchar(50)  NOT NULL,
    ADRESS varchar(50)  NOT NULL,
    CONSTRAINT PATIENTS_pk PRIMARY KEY  (PATIENT_ID)
);

-- Table: PAYMENT
CREATE TABLE PAYMENT (
    PAYMENT_ID int  NOT NULL,
    AMOUNT int  NOT NULL,
    APPOINTMENT_ID int  NOT NULL,
    CONSTRAINT PAYMENT_pk PRIMARY KEY  (PAYMENT_ID)
);

-- Table: TREATMENT
CREATE TABLE TREATMENT (
    TREATMENT_ID int  NOT NULL,
    TNAME varchar(50)  NOT NULL,
    TCOST int  NOT NULL,
    CONSTRAINT TREATMENT_pk PRIMARY KEY  (TREATMENT_ID)
);

-- Table: TREATMENT_PERFORMED
CREATE TABLE TREATMENT_PERFORMED (
    TREATMENT_ID int  NOT NULL,
    APPOINTMENT_ID int  NOT NULL,
    PAYMENT_ID int  NOT NULL,
    CONSTRAINT TREATMENT_PERFORMED_pk PRIMARY KEY  (TREATMENT_ID,APPOINTMENT_ID)
);

-- foreign keys
-- Reference: APPOINTMENT_EMPLOYEE (table: APPOINTMENT)
ALTER TABLE APPOINTMENT ADD CONSTRAINT APPOINTMENT_EMPLOYEE
    FOREIGN KEY (EMPLOYEE_ID)
    REFERENCES EMPLOYEE (EMPLOYEE_ID);

-- Reference: APPOINTMENT_PATIENT (table: APPOINTMENT)
ALTER TABLE APPOINTMENT ADD CONSTRAINT APPOINTMENT_PATIENT
    FOREIGN KEY (PATIENT_ID)
    REFERENCES PATIENTS (PATIENT_ID);

-- Reference: EMPLOYEE_CLINIC (table: EMPLOYEE)
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_CLINIC
    FOREIGN KEY (CLINIC_ID)
    REFERENCES CLINIC (CLINIC_ID);

-- Reference: PAYMENT_APPOINTMENT (table: PAYMENT)
ALTER TABLE PAYMENT ADD CONSTRAINT PAYMENT_APPOINTMENT
    FOREIGN KEY (APPOINTMENT_ID)
    REFERENCES APPOINTMENT (APPOINTMENT_ID);

-- Reference: TREATMENT_PERFORMED_APPOINTMENT (table: TREATMENT_PERFORMED)
ALTER TABLE TREATMENT_PERFORMED ADD CONSTRAINT TREATMENT_PERFORMED_APPOINTMENT
    FOREIGN KEY (APPOINTMENT_ID)
    REFERENCES APPOINTMENT (APPOINTMENT_ID);

-- Reference: TREATMENT_PERFORMED_TREATMENT (table: TREATMENT_PERFORMED)
ALTER TABLE TREATMENT_PERFORMED ADD CONSTRAINT TREATMENT_PERFORMED_TREATMENT
    FOREIGN KEY (TREATMENT_ID)
    REFERENCES TREATMENT (TREATMENT_ID);



INSERT INTO CLINIC
(CLINIC_ID,CLINIC_NAME, ADDRESS, PHONE)
VALUES
(1,'DENTA CLINIC','ALEJA RZECZYPOSPOLITEJ 5','+48-980-354-095'),
(2,'LUX CLINIC','NOWOGRODZKA 59','+48-070-813-709'),
(3,'SUNSHINE CLINIC','CYNAMONOWA 47','+48-811-101-373'),
(4,'MILNER MEDICAL','PORY 78','+48-911-001-001'),
(5,'DEEZ CLINIC','BRYLOWSKA 12','+48-111-111-111');

INSERT INTO EMPLOYEE
(EMPLOYEE_ID, ENAME, POSITION, PHONE, SAL, CLINIC_ID)
VALUES
(1,'ZIELINSKI','HEAD DOCTOR','+48-105-706-262',4500,1),
(2,'KOWALCZYK','CHIEF ASSISTANT','+48-371-494-663',4000,1),
(3,'NOWAK','SURGEON','+48-119-141-644',3750,1),
(4,'LEWANDOWSKI','HEAD DOCTOR','+48-755-356-156',6500,2),
(5,'MOSTYN','ASSISTANT','+48-556-744-618',2500,2),
(6,'SHAPLIN','SURGEON','+48-189-536-221',3400,2),
(7,'HOUSBEY','ADMINISTRATOR','+48-284-915-993',3000,2),
(8,'BIELAWSKI','HEAD DOCTOR','+48-623-328-090',8900,3),
(9,'ABRAMOWICZ','FINANCIAL EXPERT','+48-138-542-440',5600,3),
(10,'ADAMCZYK','SURGEON','+48-594-357-599',4800,3),
(11,'GRUSZYNSKI','ADMINISTRATOR','+48-919-644-298',4000,3),
(12,'ANTONIONI','HEAD DOCTOR','+48-469-562-169',7800,4),
(13,'LIPIELLO','CHIEF ASSISTANT','+48-423-526-005',6500,4),
(14,'ANDONIIEV','HEAD DOCTOR','+48-995-449-374',8000,5),
(15,'PRZYBOROWSKI','CHIEF ASSISTANT','+48-855-784-886',5500,5),
(16,'OSTROWSKI','FINANCIAL EXPERT','+48-318-520-497',4500,5),
(17,'ADAMKOWSKI','SURGEON','+48-318-520-497',4800,5),
(18,'SWIETLINSKI','ADMINISTRATOR','+48-379-542-213',4000,5),
(19,'ORNACKI','TRAINEE','+48-318-520-497',3000,5);


INSERT INTO PATIENTS
(PATIENT_ID, PNAME, PHONE, ADRESS)
VALUES
(1,'PADILLO','+48-171-886-336','PIOTROWSKA 126'),
(2,'LONDER','+48-462-239-352','OSTRZYCKA 58'),
(3,'CUMBER','+48-221-866-826','AKADEMICKA 75'),
(4,'GOTCHER','+48-438-254-341','PIASTOWSKA 8'),
(5,'RUTTEN','+48-171-886-336','PILICZNA 115'),
(6,'RUEGG','+231-671-554','MAZOWIECKA 125'),
(7,'KAYSER','+48-423-107-650','KOBIERZYCKA 145'),
(8,'GRISHIN','+48-374-596-701','KORSYKANSKA 128'),
(9,'KYTE','+48-210-658-826','GNIEWKOWSKA 50'),
(10,'KIMBLIN','+48-215-558-830','CICHA 31');

INSERT INTO APPOINTMENT
(APPOINTMENT_ID, ADATE, PATIENT_ID, EMPLOYEE_ID)
VALUES
(1, '2020-04-29', 1,1),
(2,'2020-01-10',1,1),
(3,'2021-03-15',1,1),
(4,'2021-05-18',1,2),
(5,'2019-07-19',1,2),
(6,'2019-06-20',1,3),

(7,'2020-06-14',2,4),
(8,'2019-07-28',2,4),
(9,'2021-04-22',2,4),
(10,'2021-06-07',2,4),
(11,'2021-04-10',3,5),
(12,'2019-01-21',2,5),

(13,'2021-04-14',2,6),
(14,'2019-12-06',2,6),
(15,'2019-05-25',3,7),
(16,'2020-06-12',3,7),
(17,'2019-06-05',3,8),
(18,'2020-10-25',4,8),

(19,'2020-06-16',4,9),
(20,'2020-10-31',4,10),
(21,'2021-03-11',4,10),
(22,'2019-10-03',5,10),
(23,'2019-05-12',5,11),
(24,'2019-06-21',5,11),

(25,'2019-12-14',6,16),
(26,'2020-09-02',7,17),
(27,'2020-10-03',7,19),
(28,'2021-04-04',8,19),
(29,'2019-05-26',9,18),
(30,'2020-12-25',10,19);

INSERT INTO PAYMENT
(PAYMENT_ID, AMOUNT, APPOINTMENT_ID)
VALUES
(1,1300,1),
(2,2500,2),
(3,6500,3),
(4,450,4),
(5,300,5),
(6,780,6),
(7,900,7),
(8,1300,8),
(9,1100,9),
(10,1000,10),
(11,800,11),
(12,1450,12),
(13,1500,13),
(14,1700,14),
(15,1800,15),
(16,1000,16),
(17,5500,17),
(18,6500,18),
(19,8000,19),
(20,750,20),
(21,600,21),
(22,700,22),
(23,500,23),
(24,550,24),
(25,980,25),
(26,1560,26),
(27,1800,27),
(28,2000,28),
(29,1900,29),
(30,2200,30);


INSERT INTO TREATMENT
(TREATMENT_ID, TNAME, TCOST)
VALUES
(1,'FILLING',150),
(2,'DENTAL CROWNS',500),
(3,'BRACES',2500),
(4,'TOOTH EXTRACTION',450),
(5,'ORAL SURGERY',1800),
(6,'IMPLANTS',3500);

INSERT INTO TREATMENT_PERFORMED
(TREATMENT_ID, APPOINTMENT_ID, PAYMENT_ID)
VALUES
(1,1,1),
(1,2,7),
(1,3,8),
(1,4,29),
(1,5,4),
(4,6,2),
(2,7,3),
(6,8,30),
(5,9,5),
(4,10,6),
(4,11,9),
(3,12,10),
(2,13,11),
(2,14,12),
(1,15,13),
(1,16,14),
(2,17,15),
(4,18,16),
(5,19,17),
(5,20,18),
(5,21,19),
(6,22,20),
(5,23,21),
(6,24,22),
(6,25,23),
(5,26,24),
(5,27,25),
(5,28,26),
(5,29,27),
(3,30,28);

-------------------------------------------------------------------------------------------------
--TRIGGERS

--1 trigger.Patients deletion log: who,by whom and when
CREATE TABLE PATIENTS_LOG(PATIENT_ID INT,PNAME VARCHAR(50),WHO_DELETED VARCHAR(50),WHEN_DELETED DATE, OPERATION VARCHAR(1));


CREATE TRIGGER T1 ON PATIENTS
    FOR INSERT, DELETE, UPDATE
AS
DECLARE
    @LOGIN_NAME VARCHAR(50);
    SELECT @LOGIN_NAME = LOGIN_NAME
    FROM SYS.dm_exec_sessions
    WHERE session_id = @@SPID;
    IF EXISTS ( SELECT 0 FROM Deleted )
        BEGIN
            IF EXISTS( SELECT 0 FROM INSERTED )
                BEGIN
                    INSERT INTO PATIENTS_LOG
                    (PATIENT_ID, PNAME, WHO_DELETED, WHEN_DELETED, OPERATION)
                        SELECT D.PATIENT_ID, D.PNAME, @LOGIN_NAME, GETDATE(),'U'
                            FROM DELETED D;
                END;
            ELSE
                 BEGIN
                    INSERT INTO PATIENTS_LOG
                    (PATIENT_ID, PNAME, WHO_DELETED, WHEN_DELETED, OPERATION)
                        SELECT D.PATIENT_ID, D.PNAME, @LOGIN_NAME, GETDATE(),'D'
                            FROM DELETED D;
                END;


        END;

    ELSE
        BEGIN
            INSERT INTO PATIENTS_LOG
            (PATIENT_ID, PNAME, WHO_DELETED, WHEN_DELETED, OPERATION)
                SELECT I.PATIENT_ID, I.PNAME, @LOGIN_NAME, GETDATE(),'I'
                            FROM INSERTED I;
        END
    GO

SELECT * FROM PATIENTS_LOG

--2 trigger.Trigger that doesn't allow to delete head doctors
CREATE TRIGGER T2 ON EMPLOYEE
FOR DELETE
AS
BEGIN
    DECLARE
    @OLDP VARCHAR(50);

    SELECT @OLDP = POSITION
    FROM DELETED;

IF (@OLDP = 'HEAD DOCTOR')
RAISERROR ('DELETING HEAD DOCTORS is forbidden!', 15, 1);
		ROLLBACK;
END;
GO
DELETE FROM EMPLOYEE WHERE POSITION ='HEAD DOCTOR';

CREATE TRIGGER T3 ON EMPLOYEE
    FOR DELETE
    AS

    BEGIN
DECLARE
    @OLDP VARCHAR(50);

    SELECT @OLDP = POSITION
    FROM DELETED;
IF (@OLDP = 'TRAINEE')
RAISERROR ('WE CANNOT FIRE TRAINEES LET THEM WORK!', 15, 1);
		ROLLBACK;
    END;
    GO

DELETE FROM EMPLOYEE WHERE POSITION = 'TRAINEE';
-------------------------------------------------------------------
--Procedure which increases salary of  employees in particular clinic
--to the desired level if it is lower than one
CREATE PROCEDURE UPDATE_MIN_SAL
(
@P_LOWERBOUND INT,
@P_CLINIC_ID INT
)
AS

DECLARE
    @V_CLINIC_ID INT,
    @V_EMPLOYEE_ID INT,
    @V_SAL INT;
DECLARE CUR CURSOR FOR
    SELECT SAL, CLINIC_ID, EMPLOYEE_ID
    FROM EMPLOYEE WHERE CLINIC_ID = @P_CLINIC_ID;
BEGIN
    OPEN CUR;
    FETCH NEXT FROM CUR INTO @V_SAL,@V_CLINIC_ID,@V_EMPLOYEE_ID;
        WHILE @@FETCH_STATUS = 0
            BEGIN
                IF @V_SAL < @P_LOWERBOUND
                    BEGIN
                        UPDATE EMPLOYEE SET SAL = @P_LOWERBOUND
                        WHERE EMPLOYEE_ID = @V_EMPLOYEE_ID AND CLINIC_ID = @V_CLINIC_ID;
                    END;
            END;
            CLOSE CUR;
    DEALLOCATE  CUR;
END;
GO

EXEC UPDATE_MIN_SAL 5555,2;

SELECT * FROM EMPLOYEE WHERE CLINIC_ID = 2;
--2ND PROCEDURE
--Procedure for adding new employee

CREATE PROCEDURE ADD_EMPLOYEE
(
@P_CLINIC_ID INT,
@P_ENAME VARCHAR(50),
@P_POSITION VARCHAR(50),
@P_PHONE VARCHAR(50),
@P_SAL INT
)
AS
DECLARE
    @V_IFCLINICEXISTS INTEGER,
    @V_IFPHONEEXISTS INTEGER,
    @V_NEWID INTEGER;
BEGIN

    SELECT @V_IFCLINICEXISTS = COUNT(1)
    FROM CLINIC
    WHERE CLINIC_ID = @P_CLINIC_ID;

    IF (@V_IFCLINICEXISTS = 0)
        RAISERROR('CLINIC ERROR',11,1);

    SELECT @V_IFPHONEEXISTS = COUNT(1)
    FROM EMPLOYEE
    WHERE PHONE = @P_PHONE;

    IF (@V_IFPHONEEXISTS != 0)
        RAISERROR('PHONE ERROR',16,1);


    SELECT @V_NEWID = MAX(EMPLOYEE_ID) + 1
    FROM EMPLOYEE;

    IF @P_SAL > 99999
     RAISERROR('SALARY ERROR',16,1);

    INSERT INTO EMPLOYEE
    (EMPLOYEE_ID, ENAME, POSITION, PHONE, SAL, CLINIC_ID)
    VALUES (@V_NEWID, @P_ENAME,@P_POSITION, @P_PHONE,@P_SAL,@P_CLINIC_ID);
END;

EXEC ADD_EMPLOYEE 1, 'DOE', 'BIG CHEESE','21321',123222;

SELECT * FROM EMPLOYEE
    WHERE CLINIC_ID = 1;

CREATE PROCEDURE ADD_CLINIC
(
@P_NEWNAME VARCHAR(50),
@P_ADDRESS VARCHAR(50),
@P_PHONE VARCHAR(50)
)
AS
DECLARE
    @V_IFCLINICEXISTS INTEGER,
    @V_IFPHONEEXISTS INTEGER,
    @V_NEWID INTEGER;
BEGIN

    SELECT @V_IFCLINICEXISTS = COUNT(1)
    FROM CLINIC
    WHERE CLINIC_NAME = @P_NEWNAME;

    IF (@V_IFCLINICEXISTS = 1)
        RAISERROR('CLINIC ERROR',11,1);

    SELECT @V_IFPHONEEXISTS = COUNT(1)
    FROM CLINIC
    WHERE PHONE = @P_PHONE;

    IF (@V_IFPHONEEXISTS != 0)
        RAISERROR('PHONE ERROR',16,1);


    SELECT @V_NEWID = MAX(CLINIC_ID) + 1
    FROM CLINIC;


    INSERT INTO CLINIC
    (CLINIC_ID, CLINIC_NAME, ADDRESS, PHONE)
    VALUES (@V_NEWID, @P_NEWNAME,@P_ADDRESS, @P_PHONE);
END;

    EXECUTE ADD_CLINIC 'DENTA', 'KOSZYKOWA 77', '+48-777-777-777'

DROP TABLE TREATMENT_PERFORMED;
DROP TABLE TREATMENT;
DROP TABLE PAYMENT;
DROP TABLE APPOINTMENT;
DROP TABLE PATIENTS;
DROP TABLE EMPLOYEE;
DROP TABLE CLINIC;